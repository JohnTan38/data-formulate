{"version":3,"sources":["webpack://React-Selectable-Fast/webpack/universalModuleDefinition","webpack://React-Selectable-Fast/webpack/bootstrap","webpack://React-Selectable-Fast/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://React-Selectable-Fast/./src/utils/castTouchToMouseEvent.ts","webpack://React-Selectable-Fast/./src/utils/detectMouseButton.ts","webpack://React-Selectable-Fast/./src/utils/doObjectsCollide.ts","webpack://React-Selectable-Fast/./src/utils/getBoundsForNode.ts","webpack://React-Selectable-Fast/./src/utils/nodeInRoot.ts","webpack://React-Selectable-Fast/./src/utils/index.ts","webpack://React-Selectable-Fast/./src/SelectableGroup.context.ts","webpack://React-Selectable-Fast/./src/Selectbox.tsx","webpack://React-Selectable-Fast/./src/SelectableGroup.tsx","webpack://React-Selectable-Fast/./src/CreateSelectable.tsx","webpack://React-Selectable-Fast/./src/SelectAll.tsx","webpack://React-Selectable-Fast/./src/DeselectAll.tsx"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","propertiesToNormalize","patchEventProperties","evt","touchKey","forEach","castTouchToMouseEvent","type","includes","err","console","error","message","detectMouseButton","buttonNumber","options","metaKey","allowMetaClick","ctrlKey","allowCtrlClick","altKey","allowAltClick","shiftKey","allowShiftClick","buttons","which","button","areBoundsCollide","a","b","tolerance","useOffsetSize","aHeight","offsetHeight","height","bHeight","aWidth","offsetWidth","width","bWidth","top","left","toArray","Array","isArray","doObjectsCollide","delta","aBounds","bBounds","length","j","getDocumentScroll","documentScrollTop","Math","max","pageYOffset","document","documentElement","scrollTop","body","documentScrollLeft","pageXOffset","scrollLeft","getBoundsForNode","node","containerScroll","from","getClientRects","map","rect","isNodeInRoot","parentNode","noop","SelectableGroupContext","React","createContext","selectable","register","_","unregister","selectAll","clearSelection","getScrolledContainer","initialState","y","x","Selectbox","props","fixedPosition","getSetState","className","useState","state","setState","useEffect","boxStyle","zIndex","position","cursor","willChange","transform","style","defaultProps","SelectableGroup","selectionMode","selectboxY","selectboxX","target","Set","Map","ignoreList","concat","scrollContainer","documentScroll","registry","values","updateBounds","containerDocumentScroll","selectableItem","add","isSelected","selectedItems","isRemoved","has","selectingItems","onSelectedItemUnmount","checkScrollTop","clientY","checkScrollBottom","checkScrollLeft","clientX","checkScrollRight","offset","minimumSpeedFactor","scrollSpeed","currentTop","scrollBounds","getScrollStep","bottom","innerHeight","newTop","min","maxScrollTop","currentLeft","newLeft","right","innerWidth","maxScrollLeft","event","updateContainerScroll","mouseMoveStarted","mouseMoved","mouseDownData","pointY","pointX","selectboxState","abs","setSelectboxState","selectboxBounds","selectItems","duringSelection","enableDeselect","mixedDeselect","item","processItem","isFromClick","onSelectionFinish","onSelectionClear","removeIgnoredItemsFromRegistry","e","isNotLeftButtonClick","mouseDownStarted","disabled","isInIgnoreList","resetOnStart","mouseUpStarted","globalMouse","selectableGroup","bounds","pageY","pageX","updateRootBounds","updateRegistry","preventDefault","addEventListener","updateSelectBox","mouseUp","removeTempEventListeners","handleClick","isSelecting","clear","preventEvent","toggleSelectionMode","cleanUp","keyCode","ref","registerSelectable","unregisterSelectable","this","querySelector","saveContainerScroll","saveDocumentScroll","mouseDown","deselectOnEsc","keyListener","removeEventListener","getBoundingClientRect","scrollHeight","clientHeight","scrollWidth","clientWidth","size","isCollided","clickedItem","selectionStarted","deselected","deselectionStarted","canSelect","updateSelecting","undefined","ignoreCheckCache","shouldBeIgnored","ignoreListNodes","some","ignoredNode","contains","set","querySelectorAll","join","filter","preventHandler","stopPropagation","selectOnClick","clickClassName","allowClickWithoutSelected","classNames","classList","isMouseUpOnClickElement","component","GroupComponent","selectionModeClass","selectboxClassName","children","Provider","contextValue","getGroupRef","defaultContainerStyle","getSelectboxSetState","Component","createSelectable","WrappedComponent","context","selectableRef","getSelectableRef","SelectAll","rest","ButtonComponent","getRootRef","onClick","DeselectAll"],"mappings":"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","file":"react-selectable-fast.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"React-Selectable-Fast\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"React-Selectable-Fast\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { MouseEvent } from 'react'\n\nconst propertiesToNormalize = ['pageX', 'pageY', 'clientX', 'clientY']\n\nfunction patchEventProperties(evt: any, touchKey: string) {\n  propertiesToNormalize.forEach(key => {\n    if (typeof evt[key] === 'undefined') {\n      evt[key] = evt[touchKey][0][key]\n    }\n  })\n}\n\n/**\n * Used to return event object with desktop (non-touch) format of event\n * coordinates, regardless of whether the action is from mobile or desktop.\n */\nexport function castTouchToMouseEvent(evt: any): MouseEvent<HTMLElement> {\n  if (evt.type.includes('mouse')) {\n    return evt\n  }\n\n  try {\n    if (evt.type === 'touchstart') {\n      patchEventProperties(evt, 'targetTouches')\n    } else if (evt.type === 'touchmove') {\n      patchEventProperties(evt, 'changedTouches')\n    }\n  } catch (err) {\n    console.error(err.message)\n  }\n\n  return evt as MouseEvent<HTMLElement>\n}\n","import { MouseEvent } from 'react'\n\ntype TDetectMouseButtonOptions = {\n  allowAltClick?: boolean\n  allowCtrlClick?: boolean\n  allowMetaClick?: boolean\n  allowShiftClick?: boolean\n}\n\n/**\n * @buttonNumber\n * 1: Left button\n * 2: Middle/Right button\n * 3: Right/Back button\n */\nexport function detectMouseButton(\n  evt: MouseEvent<HTMLElement>,\n  buttonNumber = 1,\n  options: TDetectMouseButtonOptions = {}\n) {\n  if (\n    (evt.metaKey && !options.allowMetaClick) ||\n    (evt.ctrlKey && !options.allowCtrlClick) ||\n    (evt.altKey && !options.allowAltClick) ||\n    (evt.shiftKey && !options.allowShiftClick)\n  ) {\n    return false\n  }\n\n  if ('buttons' in evt) {\n    return evt.buttons === buttonNumber\n  }\n\n  if ('which' in evt) {\n    return (evt as KeyboardEvent).which === buttonNumber\n  }\n\n  return (evt as MouseEvent).button === buttonNumber - 1\n}\n","import { TComputedBounds } from './getBoundsForNode'\n\ntype TAreBoundsCollideOptions = {\n  tolerance?: number\n  useOffsetSize?: boolean\n}\n\n/**\n * Given offsets, widths, and heights of two objects, determine if they collide (overlap).\n */\nconst areBoundsCollide = (\n  a: TComputedBounds,\n  b: TComputedBounds,\n  { tolerance = 0, useOffsetSize = false }: TAreBoundsCollideOptions\n) => {\n  const aHeight = useOffsetSize ? a.offsetHeight : a.height\n  const bHeight = useOffsetSize ? b.offsetHeight : b.height\n\n  const aWidth = useOffsetSize ? a.offsetWidth : a.width\n  const bWidth = useOffsetSize ? b.offsetWidth : b.width\n\n  return !(\n    a.top + aHeight - tolerance < b.top ||\n    // 'a' top doesn't touch 'b' bottom\n    a.top + tolerance > b.top + bHeight ||\n    // 'a' right doesn't touch 'b' left\n    a.left + aWidth - tolerance < b.left ||\n    // 'a' left doesn't touch 'b' right\n    a.left + tolerance > b.left + bWidth\n  )\n}\n\nfunction toArray(value: any) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [value]\n}\n\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n */\nexport function doObjectsCollide(\n  a: TComputedBounds | TComputedBounds[],\n  b: TComputedBounds | TComputedBounds[],\n  tolerance = 0,\n  delta = 1\n) {\n  const aBounds = toArray(a)\n  const bBounds = toArray(b)\n\n  for (let i = 0; i < aBounds.length; i++) {\n    for (let j = 0; j < bBounds.length; j++) {\n      return areBoundsCollide(aBounds[i], bBounds[j], { tolerance, useOffsetSize: delta === 1 })\n    }\n  }\n}\n","export type TGetBoundsForNodeArgs = {\n  scrollTop: number\n  scrollLeft: number\n}\n\nexport type TComputedBounds = {\n  top: number\n  left: number\n  width: number\n  height: number\n  offsetWidth: number\n  offsetHeight: number\n}\n\nexport function getDocumentScroll() {\n  const documentScrollTop = Math.max(\n    window.pageYOffset,\n    document.documentElement.scrollTop,\n    document.body.scrollTop\n  )\n\n  const documentScrollLeft = Math.max(\n    window.pageXOffset,\n    document.documentElement.scrollLeft,\n    document.body.scrollLeft\n  )\n\n  return { documentScrollTop, documentScrollLeft }\n}\n\n/**\n * Given a node, get everything needed to calculate its boundaries\n */\nexport function getBoundsForNode(\n  node: HTMLElement,\n  containerScroll: TGetBoundsForNodeArgs = { scrollTop: 0, scrollLeft: 0 }\n): TComputedBounds[] {\n  const { scrollTop, scrollLeft } = containerScroll\n\n  return Array.from(node.getClientRects()).map(rect => ({\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft,\n    offsetWidth: node.offsetWidth,\n    offsetHeight: node.offsetHeight,\n    width: rect.width,\n    height: rect.height,\n  }))\n}\n","export function isNodeInRoot(node: HTMLElement, root: HTMLElement) {\n  while (node) {\n    if (node === root) {\n      return true\n    }\n\n    node = node.parentNode as any\n  }\n\n  return false\n}\n","export const noop = () => {}\nexport type Maybe<T> = T | null\n\nexport * from './castTouchToMouseEvent'\nexport * from './detectMouseButton'\nexport * from './doObjectsCollide'\nexport * from './getBoundsForNode'\nexport * from './nodeInRoot'\n","import React from 'react'\n\nimport { TSelectableGroupContext, TSelectableItem } from './Selectable.types'\nimport { noop } from './utils'\n\nexport const SelectableGroupContext = React.createContext<TSelectableGroupContext>({\n  selectable: {\n    register(_: TSelectableItem) {},\n    unregister(_: TSelectableItem) {},\n    selectAll: noop,\n    clearSelection: noop,\n    getScrolledContainer: () => null,\n  },\n})\n","import React, { useState, useEffect, CSSProperties } from 'react'\n\nexport type TSetSelectboxState = React.Dispatch<React.SetStateAction<TSelectboxState>>\n\nexport type TSelectboxProps = {\n  fixedPosition: boolean\n  className: string\n  getSetState(setState: TSetSelectboxState): void\n}\n\nexport type TSelectboxState = {\n  y: number\n  x: number\n  width: number\n  height: number\n}\n\nconst initialState: TSelectboxState = {\n  y: 0,\n  x: 0,\n  width: 0,\n  height: 0,\n}\n\nexport function Selectbox(props: TSelectboxProps) {\n  const { fixedPosition, getSetState, className } = props\n  const [state, setState] = useState(initialState)\n\n  useEffect(() => {\n    getSetState(setState)\n  }, [])\n\n  const boxStyle: CSSProperties = {\n    left: state.x,\n    top: state.y,\n    width: state.width,\n    height: state.height,\n    zIndex: 9000,\n    position: fixedPosition ? 'fixed' : 'absolute',\n    cursor: 'default',\n    willChange: 'transform',\n    transform: 'translateZ(0)',\n  }\n\n  return <div className={className} style={boxStyle} />\n}\n\nSelectbox.defaultProps = {\n  className: 'selectable-selectbox',\n}\n","import React, { Component, MouseEvent, ComponentType, CSSProperties } from 'react'\n\nimport {\n  castTouchToMouseEvent,\n  detectMouseButton,\n  doObjectsCollide,\n  getBoundsForNode,\n  isNodeInRoot,\n  noop,\n  Maybe,\n  TComputedBounds,\n  getDocumentScroll,\n} from './utils'\nimport { TSelectableItem } from './Selectable.types'\nimport { SelectableGroupContext } from './SelectableGroup.context'\nimport { Selectbox, TSetSelectboxState } from './Selectbox'\n\ntype TSelectItemsOptions = {\n  isFromClick?: boolean\n}\n\ntype TMouseDownData = {\n  selectboxY: number\n  selectboxX: number\n  target: HTMLElement | null\n}\n\ntype TProcessItemOptions = TSelectItemsOptions & {\n  item: TSelectableItem\n  tolerance: number\n  selectboxBounds: TComputedBounds\n  enableDeselect: boolean\n  mixedDeselect: boolean\n}\n\nexport type TSelectableGroupProps = {\n  globalMouse?: boolean\n  ignoreList?: string[]\n  scrollSpeed?: number\n  minimumSpeedFactor?: number\n  allowClickWithoutSelected?: boolean\n  className?: string\n  clickClassName?: string\n  selectboxClassName?: string\n  style?: CSSProperties\n  selectionModeClass?: string\n  // Event that will fire when items are selected. Passes an array of keys.\n  onSelectionFinish?: Function\n  onSelectionClear?: Function\n  onSelectedItemUnmount?: Function\n  enableDeselect?: boolean\n  mixedDeselect?: boolean\n  deselectOnEsc?: boolean\n  resetOnStart?: boolean\n  disabled?: boolean\n  delta?: number\n  allowAltClick?: boolean\n  allowCtrlClick?: boolean\n  allowMetaClick?: boolean\n  allowShiftClick?: boolean\n  selectOnClick?: boolean\n  // Scroll container selector\n  scrollContainer?: string\n\n  /**\n   * Event that will fire rapidly during selection (while the selector is\n   * being dragged). Passes an array of keys.\n   */\n  duringSelection?: Function\n\n  // The component that will represent the Selectable DOM node\n  component?: ComponentType\n\n  /**\n   * Amount of forgiveness an item will offer to the selectbox before registering\n   * a selection, i.e. if only 1px of the item is in the selection, it shouldn't be\n   * included.\n   */\n  tolerance?: number\n\n  /**\n   * In some cases, it the bounding box may need fixed positioning, if your layout\n   * is relying on fixed positioned elements, for instance.\n   * @type boolean\n   */\n  fixedPosition?: boolean\n}\n\nexport class SelectableGroup extends Component<TSelectableGroupProps> {\n  static defaultProps = {\n    clickClassName: '',\n    tolerance: 0,\n    globalMouse: false,\n    ignoreList: [],\n    scrollSpeed: 0.25,\n    minimumSpeedFactor: 60,\n    duringSelection: noop,\n    onSelectionFinish: noop,\n    onSelectionClear: noop,\n    onSelectedItemUnmount: noop,\n    allowClickWithoutSelected: true,\n    selectionModeClass: 'in-selection-mode',\n    resetOnStart: false,\n    disabled: false,\n    deselectOnEsc: true,\n    fixedPosition: false,\n    delta: 1,\n    allowAltClick: false,\n    allowCtrlClick: false,\n    allowMetaClick: false,\n    allowShiftClick: false,\n    selectOnClick: true,\n  }\n\n  state = { selectionMode: false }\n\n  mouseDownStarted = false\n\n  mouseMoveStarted = false\n\n  mouseMoved = false\n\n  mouseUpStarted = false\n\n  selectionStarted = false\n\n  deselectionStarted = false\n\n  clickedItem?: TSelectableItem\n\n  mouseDownData: TMouseDownData = {\n    selectboxY: 0,\n    selectboxX: 0,\n    target: null,\n  }\n\n  registry = new Set<TSelectableItem>()\n\n  selectedItems = new Set<TSelectableItem>()\n\n  selectingItems = new Set<TSelectableItem>()\n\n  ignoreCheckCache = new Map<HTMLElement, boolean>()\n\n  ignoreList = this.props.ignoreList!.concat(['.selectable-select-all', '.selectable-deselect-all'])\n\n  ignoreListNodes: HTMLElement[] = []\n\n  setSelectboxState: Maybe<TSetSelectboxState> = null\n\n  selectableGroup: Maybe<HTMLElement> = null\n\n  scrollContainer: Maybe<HTMLElement> = null\n\n  maxScrollTop = 0\n\n  maxScrollLeft = 0\n\n  scrollBounds: Maybe<DOMRect | ClientRect> = null\n\n  containerScroll = {\n    scrollTop: 0,\n    scrollLeft: 0,\n  }\n\n  documentScroll = {\n    scrollTop: 0,\n    scrollLeft: 0,\n  }\n\n  componentDidMount() {\n    if (this.props.scrollContainer) {\n      this.scrollContainer = document.querySelector(this.props.scrollContainer)\n    } else {\n      this.scrollContainer = this.selectableGroup\n    }\n\n    this.scrollContainer!.addEventListener('scroll', this.saveContainerScroll)\n    document.addEventListener('scroll', this.saveDocumentScroll)\n\n    this.selectableGroup!.addEventListener('mousedown', this.mouseDown)\n    this.selectableGroup!.addEventListener('touchstart', this.mouseDown)\n\n    if (this.props.deselectOnEsc) {\n      document.addEventListener('keydown', this.keyListener)\n      document.addEventListener('keyup', this.keyListener)\n    }\n\n    this.removeIgnoredItemsFromRegistry()\n  }\n\n  componentWillUnmount() {\n    this.scrollContainer!.removeEventListener('scroll', this.saveContainerScroll)\n    document.removeEventListener('scroll', this.saveDocumentScroll)\n\n    this.selectableGroup!.removeEventListener('mousedown', this.mouseDown)\n    this.selectableGroup!.removeEventListener('touchstart', this.mouseDown)\n\n    if (this.props.deselectOnEsc) {\n      document.removeEventListener('keydown', this.keyListener)\n      document.removeEventListener('keyup', this.keyListener)\n    }\n\n    this.removeTempEventListeners()\n\n    // Prevent onSelectedItemUnmount calls\n    this.selectedItems.clear()\n    this.selectingItems.clear()\n  }\n\n  saveContainerScroll = () => {\n    const { scrollTop, scrollLeft } = this.scrollContainer!\n\n    this.containerScroll = {\n      scrollTop,\n      scrollLeft,\n    }\n  }\n\n  saveDocumentScroll = () => {\n    const { documentScrollLeft, documentScrollTop } = getDocumentScroll()\n\n    this.documentScroll = {\n      scrollTop: documentScrollTop,\n      scrollLeft: documentScrollLeft,\n    }\n  }\n\n  get containerDocumentScroll() {\n    return {\n      scrollTop: this.containerScroll.scrollTop + this.documentScroll.scrollTop,\n      scrollLeft: this.containerScroll.scrollLeft + this.documentScroll.scrollLeft,\n    }\n  }\n\n  removeTempEventListeners() {\n    document.removeEventListener('mousemove', this.updateSelectBox)\n    document.removeEventListener('touchmove', this.updateSelectBox)\n    document.removeEventListener('mouseup', this.mouseUp)\n    document.removeEventListener('touchend', this.mouseUp)\n  }\n\n  updateRootBounds() {\n    this.scrollBounds = this.scrollContainer!.getBoundingClientRect()\n    this.maxScrollTop = this.scrollContainer!.scrollHeight - this.scrollContainer!.clientHeight\n    this.maxScrollLeft = this.scrollContainer!.scrollWidth - this.scrollContainer!.clientWidth\n  }\n\n  updateRegistry = () => {\n    for (const selectableItem of this.registry.values()) {\n      selectableItem.updateBounds(this.containerDocumentScroll)\n    }\n  }\n\n  registerSelectable = (selectableItem: TSelectableItem) => {\n    this.registry.add(selectableItem)\n\n    if (selectableItem.state.isSelected) {\n      this.selectedItems.add(selectableItem)\n    }\n  }\n\n  unregisterSelectable = (selectableItem: TSelectableItem) => {\n    this.registry.delete(selectableItem)\n\n    const isRemoved =\n      this.selectedItems.has(selectableItem) || this.selectingItems.has(selectableItem)\n\n    this.selectedItems.delete(selectableItem)\n    this.selectingItems.delete(selectableItem)\n\n    if (isRemoved) {\n      // Notify third-party that component did unmount and handled item probably should be deleted\n      this.props.onSelectedItemUnmount!(selectableItem, [...this.selectedItems])\n    }\n  }\n\n  toggleSelectionMode() {\n    const {\n      selectedItems,\n      state: { selectionMode },\n    } = this\n\n    if (selectedItems.size && !selectionMode) {\n      this.setState({ selectionMode: true })\n    }\n    if (!selectedItems.size && selectionMode) {\n      this.setState({ selectionMode: false })\n    }\n  }\n\n  private updateContainerScroll = (evt: MouseEvent<HTMLElement>) => {\n    const { scrollTop, scrollLeft } = this.containerScroll\n\n    this.checkScrollTop(evt.clientY, scrollTop)\n    this.checkScrollBottom(evt.clientY, scrollTop)\n    this.checkScrollLeft(evt.clientX, scrollLeft)\n    this.checkScrollRight(evt.clientX, scrollLeft)\n  }\n\n  getScrollStep = (offset: number) => {\n    const { minimumSpeedFactor, scrollSpeed } = this.props\n\n    return Math.max(offset, minimumSpeedFactor!) * scrollSpeed!\n  }\n\n  checkScrollTop = (clientY: number, currentTop: number) => {\n    const offset = this.scrollBounds!.top - clientY\n\n    if (offset > 0 || clientY < 0) {\n      this.scrollContainer!.scrollTop = currentTop - this.getScrollStep(offset)\n    }\n  }\n\n  checkScrollBottom = (clientY: number, currentTop: number) => {\n    const offset = clientY - this.scrollBounds!.bottom\n\n    if (offset > 0 || clientY > window.innerHeight) {\n      const newTop = currentTop + this.getScrollStep(offset)\n      this.scrollContainer!.scrollTop = Math.min(newTop, this.maxScrollTop)\n    }\n  }\n\n  checkScrollLeft = (clientX: number, currentLeft: number) => {\n    const offset = this.scrollBounds!.left - clientX\n\n    if (offset > 0 || clientX < 0) {\n      const newLeft = currentLeft - this.getScrollStep(offset)\n      this.scrollContainer!.scrollLeft = newLeft\n    }\n  }\n\n  checkScrollRight = (clientX: number, currentLeft: number) => {\n    const offset = clientX - this.scrollBounds!.right\n\n    if (offset > 0 || clientX > window.innerWidth) {\n      const newLeft = currentLeft + this.getScrollStep(offset)\n      this.scrollContainer!.scrollLeft = Math.min(newLeft, this.maxScrollLeft)\n    }\n  }\n\n  updateSelectBox = (event: Event) => {\n    const evt = castTouchToMouseEvent(event)\n    this.updateContainerScroll(evt)\n\n    if (this.mouseMoveStarted) {\n      return\n    }\n    this.mouseMoveStarted = true\n    this.mouseMoved = true\n\n    const { mouseDownData } = this\n    const { clientX, clientY } = evt\n\n    const pointY = clientY - this.scrollBounds!.top + this.containerScroll.scrollTop\n    const selectboxY = Math.min(pointY, mouseDownData.selectboxY)\n\n    const pointX = clientX - this.scrollBounds!.left + this.containerScroll.scrollLeft\n    const selectboxX = Math.min(pointX, mouseDownData.selectboxX)\n\n    const selectboxState = {\n      x: selectboxX,\n      y: selectboxY,\n      width: Math.abs(pointX - mouseDownData.selectboxX),\n      height: Math.abs(pointY - mouseDownData.selectboxY),\n    }\n\n    this.setSelectboxState!(selectboxState)\n\n    const selectboxBounds = {\n      top: selectboxState.y + this.scrollBounds!.top + this.documentScroll.scrollTop,\n      left: selectboxState.x + this.scrollBounds!.left + this.documentScroll.scrollLeft,\n      width: selectboxState.width,\n      height: selectboxState.height,\n      offsetWidth: selectboxState.width || 1,\n      offsetHeight: selectboxState.height || 1,\n    }\n\n    this.selectItems(selectboxBounds)\n    this.props.duringSelection!([...this.selectingItems])\n    this.mouseMoveStarted = false\n  }\n\n  selectItems = (selectboxBounds: TComputedBounds, options: TSelectItemsOptions = {}) => {\n    const { tolerance, enableDeselect, mixedDeselect } = this.props\n\n    for (const item of this.registry.values()) {\n      this.processItem({\n        item,\n        selectboxBounds,\n        tolerance: tolerance!,\n        mixedDeselect: mixedDeselect!,\n        enableDeselect: enableDeselect!,\n        isFromClick: options && options.isFromClick,\n      })\n    }\n  }\n\n  processItem(options: TProcessItemOptions) {\n    const { item, tolerance, selectboxBounds, enableDeselect, mixedDeselect, isFromClick } = options\n\n    const { delta } = this.props\n    const isCollided = doObjectsCollide(selectboxBounds, item.bounds!, tolerance, delta)\n    const { isSelecting, isSelected } = item.state\n\n    if (isFromClick && isCollided) {\n      if (isSelected) {\n        this.selectedItems.delete(item)\n      } else {\n        this.selectedItems.add(item)\n      }\n\n      item.setState({ isSelected: !isSelected })\n      this.clickedItem = item\n\n      return item\n    }\n\n    if (!isFromClick && isCollided) {\n      if (isSelected && enableDeselect && (!this.selectionStarted || mixedDeselect)) {\n        item.setState({ isSelected: false })\n        item.deselected = true\n\n        this.deselectionStarted = true\n\n        return this.selectedItems.delete(item)\n      }\n\n      const canSelect = mixedDeselect ? !item.deselected : !this.deselectionStarted\n\n      if (!isSelecting && !isSelected && canSelect) {\n        item.setState({ isSelecting: true })\n\n        this.selectionStarted = true\n        this.selectingItems.add(item)\n\n        return { updateSelecting: true }\n      }\n    }\n\n    if (!isFromClick && !isCollided && isSelecting) {\n      if (this.selectingItems.has(item)) {\n        item.setState({ isSelecting: false })\n\n        this.selectingItems.delete(item)\n\n        return { updateSelecting: true }\n      }\n    }\n\n    return null\n  }\n\n  clearSelection = () => {\n    for (const item of this.selectedItems.values()) {\n      item.setState({ isSelected: false })\n      this.selectedItems.delete(item)\n    }\n\n    this.setState({ selectionMode: false })\n    this.props.onSelectionFinish!([...this.selectedItems])\n    this.props.onSelectionClear!()\n  }\n\n  selectAll = () => {\n    this.removeIgnoredItemsFromRegistry()\n\n    for (const item of this.registry.values()) {\n      if (!item.state.isSelected) {\n        item.setState({ isSelected: true })\n        this.selectedItems.add(item)\n      }\n    }\n\n    this.setState({ selectionMode: true })\n    this.props.onSelectionFinish!([...this.selectedItems])\n  }\n\n  isInIgnoreList(target: HTMLElement | null) {\n    if (!target) {\n      return\n    }\n\n    if (this.ignoreCheckCache.get(target) !== undefined) {\n      return this.ignoreCheckCache.get(target)\n    }\n\n    const shouldBeIgnored = this.ignoreListNodes.some(\n      ignoredNode => target === ignoredNode || ignoredNode.contains(target)\n    )\n\n    this.ignoreCheckCache.set(target, shouldBeIgnored)\n\n    return shouldBeIgnored\n  }\n\n  removeIgnoredItemsFromRegistry() {\n    this.ignoreListNodes = Array.from(document.querySelectorAll(this.ignoreList.join(', ')))\n\n    this.registry = new Set([...this.registry].filter(item => !this.isInIgnoreList(item.node)))\n    this.selectedItems = new Set(\n      [...this.selectedItems].filter(item => !this.isInIgnoreList(item.node))\n    )\n  }\n\n  mouseDown = (e: Event) => {\n    const isNotLeftButtonClick =\n      !e.type.includes('touch') &&\n      !detectMouseButton(e as any, 1, {\n        allowAltClick: this.props.allowAltClick,\n        allowCtrlClick: this.props.allowCtrlClick,\n        allowMetaClick: this.props.allowMetaClick,\n        allowShiftClick: this.props.allowShiftClick,\n      })\n    if (this.mouseDownStarted || this.props.disabled || isNotLeftButtonClick) {\n      return\n    }\n\n    this.removeIgnoredItemsFromRegistry()\n\n    if (this.isInIgnoreList(e.target as HTMLElement)) {\n      this.mouseDownStarted = false\n\n      return\n    }\n\n    if (this.props.resetOnStart) {\n      this.clearSelection()\n    }\n    this.mouseDownStarted = true\n    this.mouseUpStarted = false\n    const evt = castTouchToMouseEvent(e)\n\n    if (!this.props.globalMouse && !isNodeInRoot(evt.target as any, this.selectableGroup!)) {\n      const [bounds] = getBoundsForNode(this.selectableGroup!, this.documentScroll)\n      const collides = doObjectsCollide(\n        {\n          top: bounds.top,\n          left: bounds.left,\n          width: 0,\n          height: 0,\n          offsetHeight: bounds.offsetHeight,\n          offsetWidth: bounds.offsetWidth,\n        },\n        {\n          top: evt.pageY,\n          left: evt.pageX,\n          width: 0,\n          height: 0,\n          offsetWidth: 0,\n          offsetHeight: 0,\n        }\n      )\n\n      if (!collides) {\n        return\n      }\n    }\n\n    this.updateRootBounds()\n    this.updateRegistry()\n\n    this.mouseDownData = {\n      target: evt.target as HTMLElement,\n      selectboxY: evt.clientY - this.scrollBounds!.top + this.containerScroll.scrollTop,\n      selectboxX: evt.clientX - this.scrollBounds!.left + this.containerScroll.scrollLeft,\n    }\n\n    evt.preventDefault()\n\n    document.addEventListener('mousemove', this.updateSelectBox)\n    document.addEventListener('touchmove', this.updateSelectBox)\n    document.addEventListener('mouseup', this.mouseUp)\n    document.addEventListener('touchend', this.mouseUp)\n  }\n\n  preventEvent(target: HTMLElement, type: string) {\n    const preventHandler = (evt: Event) => {\n      target.removeEventListener(type, preventHandler, true)\n      evt.preventDefault()\n      evt.stopPropagation()\n    }\n    target.addEventListener(type, preventHandler, true)\n  }\n\n  private mouseUp = (event: Event) => {\n    if (this.mouseUpStarted) {\n      return\n    }\n\n    this.mouseUpStarted = true\n    this.mouseDownStarted = false\n    this.removeTempEventListeners()\n\n    if (!this.mouseDownData) {\n      return\n    }\n\n    const evt: any = castTouchToMouseEvent(event)\n    const { pageX, pageY } = evt\n\n    if (!this.mouseMoved && isNodeInRoot(evt.target as HTMLElement, this.selectableGroup!)) {\n      this.handleClick(evt, pageY, pageX)\n    } else {\n      for (const item of this.selectingItems.values()) {\n        item.setState({ isSelected: true, isSelecting: false })\n      }\n      this.selectedItems = new Set([...this.selectedItems, ...this.selectingItems])\n      this.selectingItems.clear()\n\n      if (evt.which === 1 && this.mouseDownData.target === evt.target) {\n        this.preventEvent(evt.target, 'click')\n      }\n\n      this.setSelectboxState!({\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      })\n      this.props.onSelectionFinish!([...this.selectedItems])\n    }\n\n    this.toggleSelectionMode()\n    this.cleanUp()\n    this.mouseMoved = false\n  }\n\n  keyListener = (evt: KeyboardEvent) => {\n    if (evt.keyCode === 27) {\n      // escape\n      this.clearSelection()\n    }\n  }\n\n  cleanUp() {\n    this.deselectionStarted = false\n    this.selectionStarted = false\n\n    if (this.props.mixedDeselect) {\n      for (const item of this.registry.values()) {\n        item.deselected = false\n      }\n    }\n  }\n\n  getGroupRef = (ref: HTMLElement | null) => {\n    this.selectableGroup = ref\n  }\n\n  getSelectboxSetState = (setState: TSetSelectboxState) => {\n    this.setSelectboxState = setState\n  }\n\n  // eslint-disable-next-line react/sort-comp\n  defaultContainerStyle: CSSProperties = {\n    position: 'relative',\n  }\n\n  contextValue = {\n    selectable: {\n      register: this.registerSelectable,\n      unregister: this.unregisterSelectable,\n      selectAll: this.selectAll,\n      clearSelection: this.clearSelection,\n      getScrolledContainer: () => this.scrollContainer,\n    },\n  }\n\n  handleClick(evt: any, top: number, left: number) {\n    if (!this.props.selectOnClick) {\n      return\n    }\n\n    const { clickClassName, allowClickWithoutSelected, onSelectionFinish } = this.props\n    const classNames = (evt.target as HTMLElement).classList || []\n    const isMouseUpOnClickElement = Array.from(classNames).includes(clickClassName!)\n\n    if (\n      allowClickWithoutSelected ||\n      this.selectedItems.size ||\n      isMouseUpOnClickElement ||\n      evt.ctrlKey\n    ) {\n      this.selectItems(\n        {\n          top,\n          left,\n          width: 0,\n          height: 0,\n          offsetWidth: 0,\n          offsetHeight: 0,\n        },\n        { isFromClick: true }\n      )\n\n      onSelectionFinish!([...this.selectedItems], this.clickedItem)\n\n      if (evt.which === 1) {\n        this.preventEvent(evt.target, 'click')\n      }\n      if (evt.which === 2 || evt.which === 3) {\n        this.preventEvent(evt.target, 'contextmenu')\n      }\n    }\n  }\n\n  render() {\n    const { selectionMode } = this.state\n    const {\n      component: GroupComponent = 'div',\n      className,\n      style,\n      selectionModeClass,\n      fixedPosition,\n      selectboxClassName,\n      children,\n    } = this.props\n\n    return (\n      <SelectableGroupContext.Provider value={this.contextValue}>\n        <GroupComponent\n          ref={this.getGroupRef}\n          style={{ ...this.defaultContainerStyle, ...style }}\n          className={`${className} ${selectionMode ? selectionModeClass : ''}`}\n        >\n          {children}\n          <Selectbox\n            getSetState={this.getSelectboxSetState}\n            className={selectboxClassName}\n            fixedPosition={fixedPosition!}\n          />\n        </GroupComponent>\n      </SelectableGroupContext.Provider>\n    )\n  }\n}\n","import React, { Component, ComponentType } from 'react'\n\nimport { getBoundsForNode, TComputedBounds, TGetBoundsForNodeArgs } from './utils'\nimport { TSelectableItemState, TSelectableItemProps } from './Selectable.types'\nimport { SelectableGroupContext } from './SelectableGroup.context'\n\ntype TAddedProps = Partial<Pick<TSelectableItemProps, 'isSelected'>>\n\nexport const createSelectable = <T extends any>(\n  WrappedComponent: ComponentType<TSelectableItemProps & T>\n): ComponentType<T & TAddedProps> =>\n  class SelectableItem extends Component<T & TAddedProps, TSelectableItemState> {\n    static contextType = SelectableGroupContext\n\n    static defaultProps = {\n      isSelected: false,\n    }\n\n    state = {\n      isSelected: this.props.isSelected,\n      isSelecting: false,\n    }\n\n    node: HTMLElement | null = null\n\n    bounds: TComputedBounds[] | null = null\n\n    componentDidMount() {\n      this.updateBounds()\n      this.context.selectable.register(this)\n    }\n\n    componentWillUnmount() {\n      this.context.selectable.unregister(this)\n    }\n\n    updateBounds = (containerScroll?: TGetBoundsForNodeArgs) => {\n      this.bounds = getBoundsForNode(this.node!, containerScroll)\n    }\n\n    getSelectableRef = (ref: HTMLElement | null) => {\n      this.node = ref\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state} selectableRef={this.getSelectableRef} />\n      )\n    }\n  }\n","import React, { Component, ReactNode, FunctionComponent } from 'react'\n\nimport { SelectableGroupContext } from './SelectableGroup.context'\n\ntype TSelectAllProps = {\n  children: ReactNode\n  component?: string | FunctionComponent\n  className?: string\n  [key: string]: any\n}\n\nexport class SelectAll extends Component<TSelectAllProps> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component = 'div', children, className = '', ...rest } = this.props\n    const ButtonComponent = component as FunctionComponent<any>\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.selectAll}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n","import React, { Component, FunctionComponent, ReactNode } from 'react'\n\nimport { SelectableGroupContext } from './SelectableGroup.context'\n\ntype TDeselectAllProps = {\n  children: ReactNode\n  component?: string | FunctionComponent\n  className?: string\n  [key: string]: any\n}\n\nexport class DeselectAll extends Component<TDeselectAllProps> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component = 'div', children, className, ...rest } = this.props\n    const ButtonComponent = component as FunctionComponent<any>\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.clearSelection}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n"],"sourceRoot":""}
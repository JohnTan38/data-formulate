import {
  embed,
  vega
} from "./chunk-RXXZQR4D.js";
import {
  require_fast_deep_equal
} from "./chunk-5NNLBS7K.js";
import "./chunk-VG2TALFG.js";
import {
  require_prop_types
} from "./chunk-MWB2B2EJ.js";
import {
  require_react
} from "./chunk-GR4EOYNK.js";
import {
  __toESM
} from "./chunk-2TUXWMP5.js";

// node_modules/react-vega/esm/Vega.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());

// node_modules/react-vega/esm/utils/shallowEqual.js
var EMPTY = {};
function shallowEqual(a, b) {
  if (a === void 0) {
    a = EMPTY;
  }
  if (b === void 0) {
    b = EMPTY;
  }
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  return a === b || aKeys.length === bKeys.length && aKeys.every((key) => a[key] === b[key]);
}

// node_modules/react-vega/esm/utils/isFunction.js
function isFunction(functionToCheck) {
  const getType = {};
  return !!functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
}

// node_modules/react-vega/esm/utils/updateSingleDatasetInView.js
function updateSingleDatasetInView(view, name, value) {
  if (value) {
    if (isFunction(value)) {
      value(view.data(name));
    } else {
      view.change(name, vega.changeset().remove(() => true).insert(value));
    }
  }
}

// node_modules/react-vega/esm/utils/updateMultipleDatasetsInView.js
function updateMultipleDatasetsInView(view, data) {
  Object.keys(data).forEach((name) => {
    updateSingleDatasetInView(view, name, data[name]);
  });
}

// node_modules/react-vega/esm/VegaEmbed.js
var import_prop_types = __toESM(require_prop_types());
var import_react = __toESM(require_react());

// node_modules/react-vega/esm/utils/getUniqueFieldNames.js
function getUniqueFieldNames(objects) {
  const fields = /* @__PURE__ */ new Set();
  objects.forEach((o) => {
    Object.keys(o).forEach((field) => {
      fields.add(field);
    });
  });
  return fields;
}

// node_modules/react-vega/esm/constants.js
var NOOP = () => {
};

// node_modules/react-vega/esm/utils/addSignalListenersToView.js
function addSignalListenersToView(view, signalListeners) {
  const signalNames = Object.keys(signalListeners);
  signalNames.forEach((signalName) => {
    try {
      view.addSignalListener(signalName, signalListeners[signalName]);
    } catch (error) {
      console.warn("Cannot add invalid signal listener.", error);
    }
  });
  return signalNames.length > 0;
}

// node_modules/react-vega/esm/utils/computeSpecChanges.js
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
function computeSpecChanges(newSpec, oldSpec) {
  if (newSpec === oldSpec) return false;
  const changes = {
    width: false,
    height: false,
    isExpensive: false
  };
  const fieldNames = getUniqueFieldNames([newSpec, oldSpec]);
  if (fieldNames.has("width") && (!("width" in newSpec) || !("width" in oldSpec) || newSpec.width !== oldSpec.width)) {
    if ("width" in newSpec && typeof newSpec.width === "number") {
      changes.width = newSpec.width;
    } else {
      changes.isExpensive = true;
    }
  }
  if (fieldNames.has("height") && (!("height" in newSpec) || !("height" in oldSpec) || newSpec.height !== oldSpec.height)) {
    if ("height" in newSpec && typeof newSpec.height === "number") {
      changes.height = newSpec.height;
    } else {
      changes.isExpensive = true;
    }
  }
  fieldNames.delete("width");
  fieldNames.delete("height");
  if ([...fieldNames].some((field) => !(field in newSpec) || !(field in oldSpec) || !(0, import_fast_deep_equal.default)(newSpec[field], oldSpec[field]))) {
    changes.isExpensive = true;
  }
  return changes.width !== false || changes.height !== false || changes.isExpensive ? changes : false;
}

// node_modules/react-vega/esm/utils/removeSignalListenersFromView.js
function removeSignalListenersFromView(view, signalListeners) {
  const signalNames = Object.keys(signalListeners);
  signalNames.forEach((signalName) => {
    try {
      view.removeSignalListener(signalName, signalListeners[signalName]);
    } catch (error) {
      console.warn("Cannot remove invalid signal listener.", error);
    }
  });
  return signalNames.length > 0;
}

// node_modules/react-vega/esm/utils/combineSpecWithDimension.js
function combineSpecWithDimension(props) {
  const {
    spec,
    width,
    height
  } = props;
  if (typeof width !== "undefined" && typeof height !== "undefined") {
    return {
      ...spec,
      width,
      height
    };
  }
  if (typeof width !== "undefined") {
    return {
      ...spec,
      width
    };
  }
  if (typeof height !== "undefined") {
    return {
      ...spec,
      height
    };
  }
  return spec;
}

// node_modules/react-vega/esm/VegaEmbed.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var VegaEmbed = class extends import_react.default.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty(this, "containerRef", import_react.default.createRef());
    _defineProperty(this, "resultPromise", void 0);
    _defineProperty(this, "handleError", (error) => {
      const {
        onError = NOOP
      } = this.props;
      onError(error, this.containerRef.current);
      console.warn(error);
      return void 0;
    });
    _defineProperty(this, "modifyView", (action) => {
      if (this.resultPromise) {
        this.resultPromise.then((result) => {
          if (result) {
            action(result.view);
          }
          return true;
        }).catch(this.handleError);
      }
    });
  }
  componentDidMount() {
    this.createView();
  }
  componentDidUpdate(prevProps) {
    const fieldSet = getUniqueFieldNames([this.props, prevProps]);
    fieldSet.delete("className");
    fieldSet.delete("signalListeners");
    fieldSet.delete("spec");
    fieldSet.delete("style");
    fieldSet.delete("width");
    fieldSet.delete("height");
    if (Array.from(fieldSet).some((f) => this.props[f] !== prevProps[f])) {
      this.clearView();
      this.createView();
    } else {
      const specChanges = computeSpecChanges(combineSpecWithDimension(this.props), combineSpecWithDimension(prevProps));
      const {
        signalListeners: newSignalListeners
      } = this.props;
      const {
        signalListeners: oldSignalListeners
      } = prevProps;
      if (specChanges) {
        if (specChanges.isExpensive) {
          this.clearView();
          this.createView();
        } else {
          const areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);
          this.modifyView((view) => {
            if (specChanges.width !== false) {
              view.width(specChanges.width);
            }
            if (specChanges.height !== false) {
              view.height(specChanges.height);
            }
            if (areSignalListenersChanged) {
              if (oldSignalListeners) {
                removeSignalListenersFromView(view, oldSignalListeners);
              }
              if (newSignalListeners) {
                addSignalListenersToView(view, newSignalListeners);
              }
            }
            view.run();
          });
        }
      } else if (!shallowEqual(newSignalListeners, oldSignalListeners)) {
        this.modifyView((view) => {
          if (oldSignalListeners) {
            removeSignalListenersFromView(view, oldSignalListeners);
          }
          if (newSignalListeners) {
            addSignalListenersToView(view, newSignalListeners);
          }
          view.run();
        });
      }
    }
  }
  componentWillUnmount() {
    this.clearView();
  }
  createView() {
    const {
      spec,
      onNewView,
      signalListeners = {},
      width,
      height,
      ...options
    } = this.props;
    if (this.containerRef.current) {
      const finalSpec = combineSpecWithDimension(this.props);
      this.resultPromise = embed(this.containerRef.current, finalSpec, options).then((result) => {
        if (result) {
          const {
            view
          } = result;
          if (addSignalListenersToView(view, signalListeners)) {
            view.run();
          }
        }
        return result;
      }).catch(this.handleError);
      if (onNewView) {
        this.modifyView(onNewView);
      }
    }
  }
  clearView() {
    if (this.resultPromise) {
      this.resultPromise.then((result) => {
        if (result) {
          result.finalize();
        }
      }).catch(this.handleError);
    }
    this.resultPromise = void 0;
    return this;
  }
  render() {
    const {
      className,
      style
    } = this.props;
    return import_react.default.createElement("div", {
      ref: this.containerRef,
      className,
      style
    });
  }
};
_defineProperty(VegaEmbed, "propTypes", {
  className: import_prop_types.default.string,
  onError: import_prop_types.default.func
});

// node_modules/react-vega/esm/Vega.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var EMPTY2 = {};
var Vega = class extends import_react2.default.PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty2(this, "vegaEmbed", import_react2.default.createRef());
    _defineProperty2(this, "handleNewView", (view) => {
      this.update();
      const {
        onNewView = NOOP
      } = this.props;
      onNewView(view);
    });
  }
  componentDidMount() {
    this.update();
  }
  componentDidUpdate(prevProps) {
    if (!shallowEqual(this.props.data, prevProps.data)) {
      this.update();
    }
  }
  update() {
    const {
      data
    } = this.props;
    if (this.vegaEmbed.current && data && Object.keys(data).length > 0) {
      this.vegaEmbed.current.modifyView((view) => {
        updateMultipleDatasetsInView(view, data);
        view.resize().run();
      });
    }
  }
  render() {
    const {
      data,
      ...restProps
    } = this.props;
    return import_react2.default.createElement(VegaEmbed, _extends({
      ref: this.vegaEmbed
    }, restProps, {
      onNewView: this.handleNewView
    }));
  }
};
_defineProperty2(Vega, "defaultProps", {
  data: EMPTY2
});

// node_modules/react-vega/esm/VegaLite.js
var import_react3 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function VegaLite(props) {
  return import_react3.default.createElement(Vega, _extends2({}, props, {
    mode: "vega-lite"
  }));
}

// node_modules/react-vega/esm/createClassFromSpec.js
var import_react4 = __toESM(require_react());
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function createClassFromSpec(_ref) {
  let {
    mode,
    spec
  } = _ref;
  class FixedVegaChart extends import_react4.default.PureComponent {
    render() {
      return import_react4.default.createElement(Vega, _extends3({
        mode,
        spec
      }, this.props));
    }
  }
  _defineProperty3(FixedVegaChart, "getSpec", function getSpec() {
    return spec;
  });
  return FixedVegaChart;
}
export {
  Vega,
  VegaLite,
  createClassFromSpec
};
//# sourceMappingURL=react-vega.js.map
